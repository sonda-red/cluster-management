ollama:
  # -- Automatically install Ollama Helm chart from https://otwld.github.io/ollama-helm/. Use [Helm Values](https://github.com/otwld/ollama-helm/#helm-values) to configure
  enabled: false

pipelines:
  # -- Automatically install Pipelines chart to extend Open WebUI functionality using Pipelines: https://github.com/open-webui/pipelines
  enabled: false

websocket:
  # -- Enables websocket support in Open WebUI with env `ENABLE_WEBSOCKET_SUPPORT`
  enabled: true
  # -- Specifies the websocket manager to use with env `WEBSOCKET_MANAGER`: redis (default)
  manager: redis
  # -- Node selector for websocket pods
  nodeSelector: {}


annotations: {}
podAnnotations: {}
podLabels: {}
replicaCount: 1
# -- Revision history limit for the workload manager (deployment).
revisionHistoryLimit: 10
# -- Priority class name for the Open WebUI pods
priorityClassName: ""
# -- Strategy for updating the workload manager: deployment or statefulset
strategy: {}
# -- Open WebUI image tags can be found here: https://github.com/open-webui/open-webui

# -- Probe for liveness of the Open WebUI container
# ref: <https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes>
livenessProbe:
  httpGet:
    path: /health
    port: http
  failureThreshold: 1
  periodSeconds: 10

# -- Probe for readiness of the Open WebUI container
# ref: <https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes>
readinessProbe:
  httpGet:
    path: /health/db
    port: http
  failureThreshold: 1
  periodSeconds: 10

# -- Probe for startup of the Open WebUI container
# ref: <https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes>
startupProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 5
  failureThreshold: 20

resources:
  requests:
    memory: "512Mi"
    cpu: "250m"
  limits:
    memory: "1Gi"
    cpu: "500m"

managedCertificate:
  enabled: false
  name: "mydomain-chat-cert" # You can override this name if needed
  domains:
    - chat.example.com # update to your real domain

ingress:
  enabled: true
  class: ""
  # -- Use appropriate annotations for your Ingress controller, e.g., for NGINX:
  annotations:
    cert-manager.io/cluster-issuer: "sonda-red-local"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  #   # Example for GKE Ingress
  #   kubernetes.io/ingress.class: "gce"
  #   kubernetes.io/ingress.global-static-ip-name: "open-webui-external-ip"   #  you need to create this address in GCP console
  #   # Force HTTP to redirect to HTTPS
  #   nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  #   nginx.ingress.kubernetes.io/ssl-redirect: "true"
  #   nginx.ingress.kubernetes.io/permanent-redirect: "https://chat.example.com"
  #   networking.gke.io/managed-certificates: "mydomain-chat-cert"
  #   # nginx.ingress.kubernetes.io/rewrite-target: /
  host: "chat.sonda.red.local"
  additionalHosts: []
  tls: true
  existingSecret: ""

persistence:
  enabled: true
  size: 5Gi
  # -- Use existingClaim if you want to re-use an existing Open WebUI PVC instead of creating a new one
  existingClaim: ""
  # -- Subdirectory of Open WebUI PVC to mount. Useful if root directory is not empty.
  subPath: ""
  # -- If using multiple replicas, you must update accessModes to ReadWriteMany
  accessModes:
    - ReadWriteOnce
  storageClass: "local-path"
  selector: {}
  annotations: {}
  # -- Sets the storage provider, availables values are `local`, `s3`, `gcs` or `azure`
  provider: s3

# -- Node labels for pod assignment.
nodeSelector: {}

# -- Tolerations for pod assignment
tolerations: []

# -- Affinity for pod assignment
affinity: {}

# -- Topology Spread Constraints for pod assignment
topologySpreadConstraints: []

# -- HostAliases to be added to hosts-file of each container
hostAliases: []

# -- Service values to expose Open WebUI pods to cluster
service:
  type: ClusterIP
  annotations: {}
  port: 80
  containerPort: 8080
  nodePort: ""
  labels: {}
  loadBalancerClass: ""

# -- Enables the use of OpenAI APIs
enableOpenaiApi: true

# -- OpenAI base API URL to use. Defaults to the Pipelines service endpoint when Pipelines are enabled, and "https://api.openai.com/v1" if Pipelines are not enabled and this value is blank
openaiBaseApiUrl: "https://api.openai.com/v1"

# -- OpenAI base API URLs to use. Overwrites the value in openaiBaseApiUrl if set
openaiBaseApiUrls:
  - "https://api.openai.com/v1"
  # - "https://api.company.openai.com/v1"


# -- Env vars added to the Open WebUI deployment. Most up-to-date environment variables can be found here: https://docs.openwebui.com/getting-started/env-configuration/
extraEnvVars:
  # -- Default API key value for Pipelines. Should be updated in a production deployment, or be changed to the required API key if not using Pipelines
  # - name: OPENAI_API_KEY
  #   value: "0p3n-w3bu!"
  # valueFrom:
  #   secretKeyRef:
  #     name: pipelines-api-key
  #     key: api-key
  # - name: OPENAI_API_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: openai-api-key
  #       key: api-key
  # - name: OLLAMA_DEBUG
  #   value: "1"

# -- Configure container volume mounts
# ref: <https://kubernetes.io/docs/tasks/configure-pod-container/configure-volume-storage/>
volumeMounts:
  initContainer: []
  # - name: ""
  #   mountPath: ""
  container: []
  # - name: ""
  #   mountPath: ""

# -- Additional init containers to add to the deployment/statefulset
# ref: <https://kubernetes.io/docs/concepts/workloads/pods/init-containers/>
extraInitContainers: []
# - name: custom-init
#   image: busybox:latest
#   command: ['sh', '-c', 'echo "Custom init container running"']
#   volumeMounts:
#   - name: data
#     mountPath: /data

# -- Configure pod volumes
# ref: <https://kubernetes.io/docs/tasks/configure-pod-container/configure-volume-storage/>
volumes: []
# - name: ""
#   configMap:
#     name: ""
# - name: ""
#   emptyDir: {}

# -- Configure pod security context
# ref: <https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container>
podSecurityContext:
  {}
  # fsGroupChangePolicy: Always
  # sysctls: []
  # supplementalGroups: []
  # fsGroup: 1001

# -- Configure container security context
# ref: <https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-containe>
containerSecurityContext:
  {}
  # runAsUser: 1001
  # runAsGroup: 1001
  # runAsNonRoot: true
  # privileged: false
  # allowPrivilegeEscalation: false
  # readOnlyRootFilesystem: false
  # capabilities:
  #   drop:
  #     - ALL
  # seccompProfile:
  #   type: "RuntimeDefault"

sso:
  # -- **Enable SSO authentication globally** must enable to use SSO authentication
  # @section -- SSO Configuration
  enabled: false
  # -- Enable account creation when logging in with OAuth (distinct from regular signup)
  # @section -- SSO Configuration
  enableSignup: false
  # -- Allow logging into accounts that match email from OAuth provider (considered insecure)
  # @section -- SSO Configuration
  mergeAccountsByEmail: false
  # -- Enable OAuth role management through access token roles claim
  # @section -- SSO Configuration
  enableRoleManagement: false
  # -- Enable OAuth group management through access token groups claim
  # @section -- SSO Configuration
  enableGroupManagement: false

  google:
    # -- Enable Google OAuth
    # @section -- Google OAuth configuration
    enabled: false
    # -- Google OAuth client ID
    # @section -- Google OAuth configuration
    clientId: ""
    # -- Google OAuth client secret (ignored if clientExistingSecret is set)
    # @section -- Google OAuth configuration
    clientSecret: ""
    # -- Google OAuth client secret from existing secret
    # @section -- Google OAuth configuration
    clientExistingSecret: ""
    # -- Google OAuth client secret key from existing secret
    # @section -- Google OAuth configuration
    clientExistingSecretKey: ""

  microsoft:
    # -- Enable Microsoft OAuth
    # @section -- Microsoft OAuth configuration
    enabled: false
    # -- Microsoft OAuth client ID
    # @section -- Microsoft OAuth configuration
    clientId: ""
    # -- Microsoft OAuth client secret (ignored if clientExistingSecret is set)
    # @section -- Microsoft OAuth configuration
    clientSecret: ""
    # -- Microsoft OAuth client secret from existing secret
    # @section -- Microsoft OAuth configuration
    clientExistingSecret: ""
    # -- Microsoft OAuth client secret key from existing secret
    # @section -- Microsoft OAuth configuration
    clientExistingSecretKey: ""
    # -- Microsoft tenant ID - use 9188040d-6c67-4c5b-b112-36a304b66dad for personal accounts
    # @section -- Microsoft OAuth configuration
    tenantId: ""

  github:
    # -- Enable GitHub OAuth
    # @section -- GitHub OAuth configuration
    enabled: false
    # -- GitHub OAuth client ID
    # @section -- GitHub OAuth configuration
    clientId: ""
    # -- GitHub OAuth client secret (ignored if clientExistingSecret is set)
    # @section -- GitHub OAuth configuration
    clientSecret: ""
    # -- GitHub OAuth client secret from existing secret
    # @section -- GitHub OAuth configuration
    clientExistingSecret: ""
    # -- GitHub OAuth client secret key from existing secret
    # @section -- GitHub OAuth configuration
    clientExistingSecretKey: ""

  oidc:
    # -- Enable OIDC authentication
    # @section -- OIDC configuration
    enabled: false
    # -- OIDC client ID
    # @section -- OIDC configuration
    clientId: ""
    # -- OIDC client secret (ignored if clientExistingSecret is set)
    # @section -- OIDC configuration
    clientSecret: ""
    # -- OICD client secret from existing secret
    # @section -- OIDC configuration
    clientExistingSecret: ""
    # -- OIDC client secret key from existing secret
    # @section -- OIDC configuration
    clientExistingSecretKey: ""
    # -- OIDC provider well known URL
    # @section -- OIDC configuration
    providerUrl: ""
    # -- Name of the provider to show on the UI
    # @section -- OIDC configuration
    providerName: "SSO"
    # -- Scopes to request (space-separated).
    # @section -- OIDC configuration
    scopes: "openid email profile"

  roleManagement:
    # -- The claim that contains the roles (can be nested, e.g., user.roles)
    # @section -- Role management configuration
    rolesClaim: "roles"
    # -- Comma-separated list of roles allowed to log in (receive open webui role user)
    # @section -- Role management configuration
    allowedRoles: ""
    # -- Comma-separated list of roles allowed to log in as admin (receive open webui role admin)
    # @section -- Role management configuration
    adminRoles: ""

  groupManagement:
    # -- The claim that contains the groups (can be nested, e.g., user.memberOf)
    # @section -- SSO Configuration
    groupsClaim: "groups"

  trustedHeader:
    # -- Enable trusted header authentication
    # @section -- SSO trusted header authentication
    enabled: false
    # -- Header containing the user's email address
    # @section -- SSO trusted header authentication
    emailHeader: ""
    # -- Header containing the user's name (optional, used for new user creation)
    # @section -- SSO trusted header authentication
    nameHeader: ""

# -- Extra resources to deploy with Open WebUI
extraResources:
  []
  # - apiVersion: v1
  #   kind: ConfigMap
  #   metadata:
  #     name: example-configmap
  #   data:
  #     example-key: example-value

# Configure Application logging levels (see. https://docs.openwebui.com/getting-started/advanced-topics/logging#-logging-levels-explained)
logging:
  # -- Set the global log level ["notset", "debug", "info" (default), "warning", "error", "critical"]
  # @section -- Logging configuration
  level: ""

  # Optional granularity: override log levels per subsystem/component
  # if not set, it will use the global level (see. https://docs.openwebui.com/getting-started/advanced-topics/logging#%EF%B8%8F-appbackend-specific-logging-levels)
  components:
    # -- Set the log level for the Audio processing component
    # @section -- Logging configuration
    audio: ""
    # -- Set the log level for the ComfyUI Integration component
    # @section -- Logging configuration
    comfyui: ""
    # -- Set the log level for the Configuration Management component
    # @section -- Logging configuration
    config: ""
    # -- Set the log level for the Database Operations (Peewee) component
    # @section -- Logging configuration
    db: ""
    # -- Set the log level for the Image Generation component
    # @section -- Logging configuration
    images: ""
    # -- Set the log level for the Main Application Execution component
    # @section -- Logging configuration
    main: ""
    # -- Set the log level for the Model Management component
    # @section -- Logging configuration
    models: ""
    # -- Set the log level for the Ollama Backend Integration component
    # @section -- Logging configuration
    ollama: ""
    # -- Set the log level for the OpenAI API Integration component
    # @section -- Logging configuration
    openai: ""
    # -- Set the log level for the Retrieval-Augmented Generation (RAG) component
    # @section -- Logging configuration
    rag: ""
    # -- Set the log level for the Authentication Webhook component
    # @section -- Logging configuration
    webhook: ""