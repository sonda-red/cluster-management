externalURL: https://harbor.sonda.red.intra
expose:
  # Set how to expose the service. Set the type as "ingress", "clusterIP", "nodePort" or "loadBalancer"
  # and fill the information in the corresponding section
  type: ingress
  tls:
    # Enable TLS or not.
    # Delete the "ssl-redirect" annotations in "expose.ingress.annotations" when TLS is disabled and "expose.type" is "ingress"
    # Note: if the "expose.type" is "ingress" and TLS is disabled,
    # the port must be included in the command when pulling/pushing images.
    # Refer to https://github.com/goharbor/harbor/issues/5291 for details.
    enabled: true
    # The source of the tls certificate. Set as "auto", "secret"
    # or "none" and fill the information in the corresponding section
    # 1) auto: generate the tls certificate automatically
    # 2) secret: read the tls certificate from the specified secret.
    # The tls certificate can be generated manually or by cert manager
    # 3) none: configure no tls certificate for the ingress. If the default
    # tls certificate is configured in the ingress controller, choose this option
    certSource: auto
    # secret:
    #   # The name of secret which contains keys named:
    #   # "tls.crt" - the certificate
    #   # "tls.key" - the private key
    #   secretName: "harbor-tls"
  ingress:
    hosts:
      core: harbor.sonda.red.intra
    # set to the type of ingress controller if it has specific requirements.
    # leave as `default` for most ingress controllers.
    # set to `gce` if using the GCE ingress controller
    # set to `ncp` if using the NCP (NSX-T Container Plugin) ingress controller
    # set to `alb` if using the ALB ingress controller
    # set to `f5-bigip` if using the F5 BIG-IP ingress controller
    controller: default
    ## Allow .Capabilities.KubeVersion.Version to be overridden while creating ingress
    kubeVersionOverride: ""
    className: "nginx"
    annotations:
      # note different ingress controllers may require a different ssl-redirect annotation
      # for Envoy, use ingress.kubernetes.io/force-ssl-redirect: "true" and remove the nginx lines below
      # ingress.kubernetes.io/ssl-redirect: "true"
      ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
      cert-manager.io/cluster-issuer: sonda-red-intra
      nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
      nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
      nginx.ingress.kubernetes.io/client-body-timeout: "7200"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "7200"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "7200"
    # ingress-specific labels
    labels: {}
registry:
  nodeSelector:
    kubernetes.io/hostname: sonda-core
  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "gpu"
      effect: "PreferNoSchedule"
core:
  nodeSelector:
    kubernetes.io/hostname: sonda-core
  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "gpu"
      effect: "PreferNoSchedule"
portal:
  nodeSelector:
    kubernetes.io/hostname: sonda-core
  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "gpu"
      effect: "PreferNoSchedule"
nginx:
  nodeSelector:
    kubernetes.io/hostname: sonda-core
  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "gpu"
      effect: "PreferNoSchedule"
jobservice:
  nodeSelector:
    kubernetes.io/hostname: sonda-core
  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "gpu"
      effect: "PreferNoSchedule"
trivy:
  nodeSelector:
    kubernetes.io/hostname: sonda-core
  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "gpu"
      effect: "PreferNoSchedule"
exporter:
  nodeSelector:
    kubernetes.io/hostname: sonda-core
  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "gpu"
      effect: "PreferNoSchedule"